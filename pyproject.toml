# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "korpus-extractor"
version = "0.1.0"
description = "Extractor for obtaining sentences and paragraphs from compressed Korean corpora files."
readme = "README.md"
authors = ["NoUnique <kofmap@gmail.com>"]
license = "MIT"
repository = "https://github.com/nounique/korpus-extractor"
homepage = "https://github.com/nounique/korpus-extractor"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = ["corpus", "extractor", "korean corpus", "korean"]

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
packages = [{ include = "korpus_extractor", from = "src" }]

[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"korpusx" = "korpus_extractor.__main__:app"

[tool.poetry.dependencies]
python = "^3.8.1"
typer = { version = "^0.8.0", extras = ["all"] }
rich = "^10.14.0"

[tool.poetry.group.dev.dependencies]
black = { version = "^23.1.0", allow-prereleases = true }
isort = { version = "^5.12.0", extras = ["colors"] }
bandit = "^1.7.5"
darglint = "^1.8.1"
flake8 = "^6.0.0"
flake8-pyproject = "^1.2.3"
pre-commit = "^3.2.1"
pydocstyle = "^6.3.0"
pylint = "^2.17.1"
pyright = "^1.1.300"
pytest = "^7.2.2"
pyupgrade = "^3.3.1"
safety = "^2.3.5"
coverage = "^7.2.2"
coverage-badge = "^1.1.0"
pytest-html = "^3.2.0"
pytest-cov = "^4.0.0"

[tool.bandit]
# https://github.com/PyCQA/bandit
exclude_dirs = ["build", "dist", "tests", "scripts"]
number = 4
recursive = true
targets = "src"

[tool.black]
# https://github.com/psf/black
target-version = ["py38", "py39", "py310", "py311"]
line-length = 120
color = true
fast = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 38
line_length = 120

known_typing = [
  "typing",
  "types",
  "typing_extensions",
  "mypy",
  "mypy_extensions",
]
sections = [
  "FUTURE",
  "TYPING",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "LOCALFOLDER",
]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true

[tool.coverage.run]
source = ["tests"]
branch = true

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
fail_under = 50
show_missing = true

[tool.flake8]
# https://github.com/PyCQA/flake8
# hack: use flake8 only for using darglint as a plugin
max-line-length = 120
ignore = ["F", "W", "E"]
select = "DAR"
extend-exclude = ".*"
extend-include = ["src/*", "tests/*"]
# https://github.com/terrencepreilly/darglint
strictness = "long"
docstring_style = "google"

[tool.pyright]
# https://github.com/microsoft/pyright
include = ["src"]
exclude = ["**/node_modules", "**/__pycache__"]
venv = ".venv"

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.8"
pythonPlatform = "Linux"

executionEnvironments = [{ root = "src" }]

[tool.pytest.ini_options]
# https://github.com/pytest-dev/pytest
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
pythonpath = ["src"]
testpaths = "tests"
markers = [
  "integration: marks as integration test",
  "slow: marks tests as slow",
  "unit: fast offline tests",
]
norecursedirs = [
  "hooks",
  "*.egg",
  ".eggs",
  "dist",
  "build",
  "docs",
  ".tox",
  ".git",
  "__pycache__",
]
doctest_optionflags = [
  "NUMBER",
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
]
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.pylint]
# https://github.com/PyCQA/pylint
extension-pkg-whitelist = [
  "numpy",
  "torch",
  "cv2",
  "pyodbc",
  "pydantic",
  "ciso8601",
  "netcdf4",
  "scipy",
]
ignore = "CVS"
ignore-patterns = "test.*?py,conftest.py"
init-hook = 'import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())'
jobs = 0
limit-inference-results = 100
persistent = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"

[tool.pylint.'MESSAGES CONTROL']
enable = "c-extension-no-member"

[tool.pylint.'REPORTS']
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format = "text"
reports = "no"
score = "yes"

[tool.pylint.'REFACTORING']
max-nested-blocks = 5
never-returning-functions = "sys.exit"

[tool.pylint.'BASIC']
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar"]
class-attribute-naming-style = "any"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
include-naming-hint = "yes"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
no-docstring-rgx = "^_"
property-classes = "abc.abstractproperty"
variable-naming-style = "snake_case"

[tool.pylint.'FORMAT']
ignore-long-lines = "^\\s*(# )?.*['\"]?<?https?://\\S+>?"
indent-after-paren = 4
indent-string = '    '
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = "no"
single-line-if-stmt = "no"

[tool.pylint.'LOGGING']
logging-format-style = "old"
logging-modules = "logging"

[tool.pylint.'MISCELLANEOUS']
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.'SIMILARITIES']
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"
min-similarity-lines = 7

[tool.pylint.'SPELLING']
max-spelling-suggestions = 4
spelling-store-unknown-words = "no"

[tool.pylint.'STRING']
check-str-concat-over-line-jumps = "no"

[tool.pylint.'TYPECHECK']
contextmanager-decorators = "contextlib.contextmanager"
generated-members = "numpy.*,np.*,pyspark.sql.functions,collect_list"
ignore-mixin-members = "yes"
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
ignored-classes = "optparse.Values,thread._local,_thread._local,numpy,torch,swagger_client"
ignored-modules = "numpy,torch,swagger_client,netCDF4,scipy"
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.'VARIABLES']
additional-builtins = "dbutils"
# allow-global-unused-variables = "yes"
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"
redefining-builtins-modules = "six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.'CLASSES']
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.'DESIGN']
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.'IMPORTS']
allow-wildcard-with-all = "no"
analyse-fallback-blocks = "no"
deprecated-modules = "optparse,tkinter.tix"

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions = ["BaseException", "Exception"]
